import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

// First Class: Interval
class Interval<T extends Comparable<T>> {
    private final T start;
    private final T end;

    public Interval(T start, T end) {
        if (start.compareTo(end) > 0) {
            throw new IllegalArgumentException("Start must be before or equal to End.");
        }
        this.start = start;
        this.end = end;
    }

    public boolean within(T time) {
        return (start.compareTo(time) <= 0 && end.compareTo(time) >= 0);
    }

    public boolean subinterval(Interval<T> other) {
        return (this.start.compareTo(other.start) <= 0 && this.end.compareTo(other.end) >= 0);
    }

    public boolean overlaps(Interval<T> other) {
        return this.start.compareTo(other.end) <= 0 && this.end.compareTo(other.start) >= 0;
    }
}

// Second Class: Time 
class Time implements Comparable<Time> {
    private final int hour;
    private final int minute;
    private final String meridian;

    public Time(int hour, int minute, String meridian) throws InvalidTime {
        if (hour < 1 || hour > 12 || minute < 0 || minute >= 60 ||
            (!meridian.equals("AM") && !meridian.equals("PM"))) {
            throw new InvalidTime("Invalid time format.");
        }
        this.hour = hour;
        this.minute = minute;
        this.meridian = meridian;
    }
  // InvalidTime Error Messages
    public Time(String timeStr) throws InvalidTime {
        try {
            String[] parts = timeStr.trim().split(" ");
            if (parts.length != 2) throw new InvalidTime("Invalid format");

            String[] hm = parts[0].split(":");
            if (hm.length != 2) throw new InvalidTime("Invalid format");

            int h = Integer.parseInt(hm[0]);
            int m = Integer.parseInt(hm[1]);
            String mer = parts[1].toUpperCase();

            if (!mer.equals("AM") && !mer.equals("PM"))
                throw new InvalidTime("Invalid meridian");

            this.hour = h;
            this.minute = m;
            this.meridian = mer;

            if (hour < 1 || hour > 12 || minute < 0 || minute > 59) {
                throw new InvalidTime("Invalid hour or minute");
            }
        } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {
            throw new InvalidTime("Invalid time format.");
        }
    }
    	// Method comepareTo: Implementation of Comparable Interface
    @Override
    public int compareTo(Time other) { 
        int thisHour = this.hour % 12 + (this.meridian.equals("PM") ? 12 : 0);
        int otherHour = other.hour % 12 + (other.meridian.equals("PM") ? 12 : 0);

        if (thisHour != otherHour) return Integer.compare(thisHour, otherHour);
        return Integer.compare(this.minute, other.minute);
    }
    	// Method toString: Returns time in HH:MM AM format
    @Override
    public String toString() {
        return String.format("%d:%02d %s", hour, minute, meridian);
    }
}

//Third Class: InvalidTime
class InvalidTime extends Exception { // Checks for Exception
    public InvalidTime(String message) {
        super(message);
    }
}

// Fourth Class: Implements GUI and Two Buttons-- #1 CompareInterval & #2 CheckTime
class DataInput {
    private TextField tfStart1 = new TextField();
    private TextField tfEnd1 = new TextField();
    private TextField tfStart2 = new TextField();
    private TextField tfEnd2 = new TextField();
    private TextField tfCheckTime = new TextField();
    private Label resultLabel = new Label();
    
  // GUI Stage
    public void buildGUI(Stage stage) {
        tfStart1.setPromptText("HH:MM AM");
        tfEnd1.setPromptText("HH:MM AM");
        tfStart2.setPromptText("HH:MM AM");
        tfEnd2.setPromptText("HH:MM AM");
        tfCheckTime.setPromptText("HH:MM AM");
        
   // Buttons Established
        Button btnCompare = new Button("Compare Intervals"); 
        Button btnCheckTime = new Button("Check Time");
        btnCompare.setOnAction(e -> compareIntervals());
        btnCheckTime.setOnAction(e -> checkTime());

        GridPane pane = new GridPane();
        pane.setPadding(new Insets(15));
        pane.setVgap(10);
        pane.setHgap(10);

        pane.add(new Label("Start Time"), 1, 0);
        pane.add(new Label("End Time"), 2, 0);
        pane.add(new Label("Time Interval 1"), 0, 1);
        pane.add(tfStart1, 1, 1);
        pane.add(tfEnd1, 2, 1);
        pane.add(new Label("Time Interval 2"), 0, 2);
        pane.add(tfStart2, 1, 2);
        pane.add(tfEnd2, 2, 2);
        pane.add(btnCompare, 1, 3, 2, 1);
        pane.add(new Label("Time to Check"), 0, 4);
        pane.add(tfCheckTime, 1, 4, 2, 1);
        pane.add(btnCheckTime, 1, 5, 2, 1);
        pane.add(resultLabel, 0, 6, 3, 1);

    // Scene for Time Interval Checker Program
        Scene scene = new Scene(pane, 450, 300);
        stage.setTitle("Time Interval Checker");
        stage.setScene(scene);
        stage.show();
    }
    		// Button #1: CompareInterval Messages
    private void compareIntervals() {
        try {
            Interval<Time> i1 = new Interval<>(new Time(tfStart1.getText()), new Time(tfEnd1.getText()));
            Interval<Time> i2 = new Interval<>(new Time(tfStart2.getText()), new Time(tfEnd2.getText()));

            String msg; 
            if (i1.subinterval(i2)) {   // Method: Subintervals
                msg = "Interval 1 is a sub-interval of interval 2";
            } else if (i2.subinterval(i1)) {
                msg = "Interval 2 is a sub-interval of interval 1";
            } else if (i1.overlaps(i2)) {  // Method: overlaps check
                msg = "The intervals overlap";
            } else {
                msg = "The intervals are disjointed";
            }
            resultLabel.setText(msg);
        } catch (InvalidTime ex) {
            resultLabel.setText("Invalid time format");
        } catch (Exception e) {
            resultLabel.setText("Error comparing intervals");
        }
    }
    		// Button #2: Checktime Messages
    private void checkTime() {
        try {
            Interval<Time> i1 = new Interval<>(new Time(tfStart1.getText()), new Time(tfEnd1.getText()));
            Interval<Time> i2 = new Interval<>(new Time(tfStart2.getText()), new Time(tfEnd2.getText()));
            Time check = new Time(tfCheckTime.getText());

            boolean in1 = i1.within(check); // Method within
            boolean in2 = i2.within(check);

            String timeStr = check.toString();
            String msg;
            if (in1 && in2) {
                msg = "Both intervals contain the time " + timeStr;
            } else if (in1) {
                msg = "Only interval 1 contains the time " + timeStr;
            } else if (in2) {
                msg = "Only interval 2 contains the time " + timeStr;
            } else {
                msg = "Neither interval contains the time " + timeStr;
            }
            resultLabel.setText(msg);
        } catch (InvalidTime ex) {
            resultLabel.setText("Invalid time format");
        } catch (Exception e) {
            resultLabel.setText("Error checking time");
        }
    }
}

// Main Application Launches Program
public class CMSC215PROJ4MandyckM extends Application {
    @Override
    public void start(Stage primaryStage) {
        new DataInput().buildGUI(primaryStage);
    }

    public static void main(String[] args) {
        launch(args);
    }
}
